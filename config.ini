[General]
shared_directory =
secure_upload_filename = True
; bool, True werkzeug.secure_filename will becalled on the uploaded file name
database_uri =

[Files]
detect_file_mime = True
; True if you want the program to use "magic.Magic(mime=True).from_buffer()" to detect the file's mime type and serve accordingly
file_mime =
; Force to serve all files using this mime type, will override detect_file_mime

[Permission]
access_password =
; if you don't want a password then leave it blank

allow_access_token_as_url_param = False
; bool, True if user can provide their AccessTokens (JWT) as a url paramater, useful for temporary access sharing 

allow_user_issue_token = False
; bool, True if a user that is authorized can issue a AccessToken for sharing files/dir to other non authorized users
; This option requires allow_access_token_as_url_param to be true

share_file_auth_required = False
; bool, cooprates with (allow_access_token_as_url_param, allow_user_issue_token)
; Only will be in effect if (allow_access_token_as_url_param, allow_user_issue_token) are true
; Only allows user who are logged in to issue a access token


upload_auth_required = True
; bool, True if login is required to upload a file
mkdir_auth_required = True
; bool, True if login is required to make a new folder
delete_auth_required = True
; bool, True if login is required to delete a file/folder
rename_auth_required = True
; bool, True if login is required to rename a file/folder


[JWT]
JWT_key = SUPER_SECRET_KEY
; Key to encrypt JWT data that contains login details
JWT_valid_for = 86400
; Seconds

[Logging]
logger_name = api
; Avaliable levels: DEBUG, INFO, WARNING, ERROR = CRITICAL
level_stdout = INFO
level_file = ERROR
